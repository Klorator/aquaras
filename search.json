[{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://klorator.github.io/aquaras/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://klorator.github.io/aquaras/articles/aquaras.html","id":"pre-lcms-run","dir":"Articles","previous_headings":"Overview","what":"Pre-LC/MS run","title":"Introduction to aquaras","text":"Provides tools working runlists use MassLynx (Waters LC/MS software). Calling ras.RunlistGenerator() launches Shiny app lets create full data frame runlist. Alternatively, ras.create.Runlist() may used directly.","code":""},{"path":"https://klorator.github.io/aquaras/articles/aquaras.html","id":"post-lcms-run","dir":"Articles","previous_headings":"Overview","what":"Post-LC/MS run","title":"Introduction to aquaras","text":"Use ras.SplitOutput() split MassLynx complete summary output file individual data frames write files. Unless clean = FALSE, removes blanks splits Name Sample Name columns according pre-LC/MS template. return list data frames write file system, use write = FALSE.","code":""},{"path":"https://klorator.github.io/aquaras/articles/aquaras.html","id":"workflow-summary","dir":"Articles","previous_headings":"Overview","what":"Workflow summary","title":"Introduction to aquaras","text":"Call ras.RunlistGenerator() Optionally: download/upload tsv “Full list” save/resume project Generate runlist “Runlist” download tsv experiments. Yeay! Call ras.SplitOutput() select MassLynx complete summary output file (file-selection window might hiding behind RStudio) Analyze results compound Publish paper! Design new experiments (rinse repeat)","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/articles/aquaras.html","id":"pre-lcms","dir":"Articles","previous_headings":"Example workflow","what":"Pre-LC/MS","title":"Introduction to aquaras","text":"mock example populated runlist. get generating final runlist version default settings. Ready pasting columns MassLynx!","code":"# str(Example_Runlist) # Run this in the console yourself # View(Example_Runlist) # Run this in the console yourself ras.Example_Runlist[c(1:2, 7:8, 13:14), c(1, 5, 8, 12, 14)] #>    Index LC_Position          Sample_name LC_Well_Type           Sample_text #> 1      1       3:A,1  20220725_RH_Index.1      Analyte  Paracetamol_0_cell_1 #> 2      2       3:A,2  20220725_RH_Index.2      Analyte Paracetamol_15_cell_1 #> 7      7       3:A,7  20220725_RH_Index.7      Analyte    Paracetamol_0_STD_ #> 8      8       3:A,8  20220725_RH_Index.8      Analyte    Paracetamol_0_STD_ #> 13    13       3:B,1 20220725_RH_Index.13        blank                 blank #> 14    14       3:B,2 20220725_RH_Index.14        blank                 blank Final_Runlist = ras.create.Runlist(ras.Example_Runlist) Final_Runlist[c(1, 5, 8, 12, 14, 16)] #> # A tibble: 150 × 6 #>    Index LC_Position Sample_name          LC_Well_Type Sample_text    Draw_Count #>    <dbl> <chr>       <chr>                <chr>        <chr>               <dbl> #>  1    13 3:B,1       20220725_RH_Index.13 blank        blank                   1 #>  2    13 3:B,1       20220725_RH_Index.13 blank        blank                   2 #>  3    13 3:B,1       20220725_RH_Index.13 blank        blank                   3 #>  4    62 3:F,2       20220725_RH_Index.62 Analyte      Ibuprofen_0_b…          1 #>  5    63 3:F,3       20220725_RH_Index.63 Analyte      Ibuprofen_0_b…          1 #>  6    64 3:F,4       20220725_RH_Index.64 Analyte      Ibuprofen_0_b…          1 #>  7    65 3:F,5       20220725_RH_Index.65 Analyte      Ibuprofen_0_b…          1 #>  8    66 3:F,6       20220725_RH_Index.66 Analyte      Ibuprofen_0_b…          1 #>  9    67 3:F,7       20220725_RH_Index.67 Analyte      Ibuprofen_0_b…          1 #> 10    68 3:F,8       20220725_RH_Index.68 Analyte      Ibuprofen_0_b…          1 #> # ℹ 140 more rows"},{"path":"https://klorator.github.io/aquaras/articles/aquaras.html","id":"post-lcms","dir":"Articles","previous_headings":"Example workflow","what":"Post-LC/MS","title":"Introduction to aquaras","text":"Recommended place output file ’s folder. Run ras.SplitOutput() select output file. splits output constituent data frames (unless write = FALSE) writes individual .txt files directory source file. Naming convention used “[source file name] - [compound name]”. clean = FALSE may used perform data manipulation stage. recommended source file created using {aquaras} standard format.","code":""},{"path":"https://klorator.github.io/aquaras/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rasmus Hammar. Author, maintainer.","code":""},{"path":"https://klorator.github.io/aquaras/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Hammar R (2024). aquaras: Data processing related MassLynx. R package version 0.1.6, https://klorator.github.io/aquaras/, https://github.com/Klorator/aquaras.","code":"@Manual{,   title = {aquaras: Data processing related to MassLynx},   author = {Rasmus Hammar},   year = {2024},   note = {R package version 0.1.6, https://klorator.github.io/aquaras/},   url = {https://github.com/Klorator/aquaras}, }"},{"path":"https://klorator.github.io/aquaras/index.html","id":"aquaras","dir":"","previous_headings":"","what":"Data processing related to MassLynx","title":"Data processing related to MassLynx","text":"created aquaras solve specific tasks added/add functionality need arises. never able make things work without amazing people create maintain packages ’ve used. Thank !","code":""},{"path":"https://klorator.github.io/aquaras/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Data processing related to MassLynx","text":"can install development version aquaras GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"Klorator/aquaras\")"},{"path":"https://klorator.github.io/aquaras/index.html","id":"runlists-for-masslynx","dir":"","previous_headings":"","what":"Runlists for MassLynx","title":"Data processing related to MassLynx","text":"Create runlists use MassLynx (Waters LC/MS software) facilitate data processing steps MassLynx complete summary output file.","code":""},{"path":"https://klorator.github.io/aquaras/index.html","id":"workflow-summary","dir":"","previous_headings":"Runlists for MassLynx","what":"Workflow summary","title":"Data processing related to MassLynx","text":"Call ras.RunlistGenerator() Optionally: download/upload tsv “Full list” save/resume project Generate runlist “Runlist” download tsv experiments. Yeay! Call ras.SplitOutput() select MassLynx complete summary output file (file-selection window might hiding behind RStudio) Analyze results compound Publish paper! Design new experiments (rinse repeat)","code":""},{"path":"https://klorator.github.io/aquaras/index.html","id":"random-group-generator","dir":"","previous_headings":"","what":"Random group generator","title":"Data processing related to MassLynx","text":"Created function ras.Randomizer() distribute list observations/compounds groups randomly. Can create multiple series write excel file (default).","code":""},{"path":"https://klorator.github.io/aquaras/index.html","id":"tpa-tools","dir":"","previous_headings":"","what":"TPA tools","title":"Data processing related to MassLynx","text":"Created function ras.TPA_calcFromIntensity() calculates TPA intensity columns. uses raw output file MaxQuant. functions, mainly ras.TPAer calculating averages standard deviation TPA columns.","code":""},{"path":"https://klorator.github.io/aquaras/index.html","id":"fic-workflow","dir":"","previous_headings":"","what":"Fic workflow","title":"Data processing related to MassLynx","text":"Look ras.Fic_workflow() df_Fic <- ras.Fic_workflow() …ras.Fu_feces_workflow() df_FuFeces <- ras.Fu_feces_workflow() See help page arguments. probably want adapt data.","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/index.html","id":"plotting-of-graphs","dir":"","previous_headings":"Planned features","what":"Plotting of graphs","title":"Data processing related to MassLynx","text":"","code":"# Plotting with ggplot2 here..."},{"path":"https://klorator.github.io/aquaras/index.html","id":"submitting-to-cran","dir":"","previous_headings":"Planned features","what":"Submitting to CRAN","title":"Data processing related to MassLynx","text":"probably never happen, cool.","code":""},{"path":"https://klorator.github.io/aquaras/reference/aquaras-package.html","id":null,"dir":"Reference","previous_headings":"","what":"aquaras: Data processing related to MassLynx — aquaras-package","title":"aquaras: Data processing related to MassLynx — aquaras-package","text":"Pre-LC/MS run: Provides tools working runlists use MassLynx (Waters LC/MS software). Calling ras.RunlistGenerator() launches Shiny app lets create full data frame runlist. Alternatively, ras.create.Runlist() may used directly. Post-LC/MS run, Use ras.SplitOutput() split MassLynx complete summary output file individual data frames write files. Unless clean = FALSE, removes blanks splits \"Name\" \"Sample Name\" columns according pre-LC/MS template.","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/reference/aquaras-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"aquaras: Data processing related to MassLynx — aquaras-package","text":"Maintainer: Rasmus Hammar Rasmus.Hammar@gmx.com","code":""},{"path":"https://klorator.github.io/aquaras/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://klorator.github.io/aquaras/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://klorator.github.io/aquaras/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://klorator.github.io/aquaras/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Example_Runlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Example runlist data frame — ras.Example_Runlist","title":"Example runlist data frame — ras.Example_Runlist","text":"example runlist demonstration test purposes.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Example_Runlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example runlist data frame — ras.Example_Runlist","text":"","code":"ras.Example_Runlist"},{"path":"https://klorator.github.io/aquaras/reference/ras.Example_Runlist.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example runlist data frame — ras.Example_Runlist","text":"data frame 672 rows 14 variables: Index Unique row identifier Plate Well plate number, 3–9 Row Row letter, -H Col Column number, 1-12 LC_Position Well coordinate, composite \"Plate:Row,Col\" Date Date character string Signature Signature identify owner Sample_name Sample name, composite \"Date_Signature_Index.Index\" Compound Name compound tested Timepoint Integer plotting timeseries Well_Type Type well contents, one \"bead\", \"medium\", \"cell\", \"STD\", \"blank\" LC_Well_Type Either \"blank\" \"Analyte\" Replicate Integer numbering replicate experiments Sample_text Sample text, composite \"Compound_Timepoint_Well_Type_Replicate\"","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Example_Runlist.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example runlist data frame — ras.Example_Runlist","text":"Created house","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_dataImport.html","id":null,"dir":"Reference","previous_headings":"","what":"Load data for Fic & Fu feces — ras.Fic_dataImport","title":"Load data for Fic & Fu feces — ras.Fic_dataImport","text":"Load data Fic & Fu feces","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_dataImport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load data for Fic & Fu feces — ras.Fic_dataImport","text":"","code":"ras.Fic_dataImport(source, .compound)"},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_dataImport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load data for Fic & Fu feces — ras.Fic_dataImport","text":"source string, either \"Sciex\" \"Waters\" .compound .compound supplied workflow function","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_dataImport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load data for Fic & Fu feces — ras.Fic_dataImport","text":"list loaded data frame & appropriate value .compound","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_dataImport.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load data for Fic & Fu feces — ras.Fic_dataImport","text":"","code":"# No example"},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_timepoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract values for Cell & Medium (values w/ timepoints) — ras.Fic_timepoint","title":"Extract values for Cell & Medium (values w/ timepoints) — ras.Fic_timepoint","text":"Extract values Cell & Medium (values w/ timepoints)","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_timepoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract values for Cell & Medium (values w/ timepoints) — ras.Fic_timepoint","text":"","code":"ras.Fic_timepoint(   df,   values = \"Conc.\",   types = c(\"Cell\", \"Medium\"),   .summarize = TRUE )"},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_timepoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract values for Cell & Medium (values w/ timepoints) — ras.Fic_timepoint","text":"df Dataframe ras.Fic_cleanup(). values Name column use values. types Vector types select timepoints . (Cell & Medium) .summarize Summarize values averages","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_timepoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract values for Cell & Medium (values w/ timepoints) — ras.Fic_timepoint","text":"List dataframes selected timepoints","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_timepoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract values for Cell & Medium (values w/ timepoints) — ras.Fic_timepoint","text":"","code":"if (FALSE) {  # No example yet  }"},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Fic end-to-end workflow (!!!) — ras.Fic_workflow","title":"Fic end-to-end workflow (!!!) — ras.Fic_workflow","text":"Currently functional!","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fic end-to-end workflow (!!!) — ras.Fic_workflow","text":"","code":"ras.Fic_workflow(   source = c(\"Waters\", \"Sciex\"),   ID = \"Sample_ID\",   values = \"Conc.\",   Buffer = \"HBSS\",   Dilution_type = \"[:digit:]x\",   Dilution_extract = \"[:digit:]+(?=x)\",   stab = \"Stab\",   czero = \"Czero\",   prot_cell_value = \"mg_Protein\",   prot_cell_type = \"Cells\",   prot_hom_value = \"Protein_conc._mg/mL\",   prot_hom_type = \"hom\",   V.medium = 200,   MassBalance_2.5 = 1.75,   .compound = \"Analyte Peak Name\",   .checkValues = TRUE,   prot_.split = \"Sample Text\",   .summarize = TRUE,   .SD = TRUE )"},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fic end-to-end workflow (!!!) — ras.Fic_workflow","text":"source source data file comes ID Column name ID column splitting values Column name values data Buffer RegEx filter buffer values Dilution_type RegEx filter dilution factor values Dilution_extract RegEx extracting dilution factor stab RegEx filter stability values czero RegEx filter C zero values Kp RegEx filter kp values prot_cell_value Column name values prot_cell_type RegEx filter prot_hom_value RegEx filter prot_hom_type RegEx filter V.medium RegEx filter MassBalance_2.5 Factor calulating Mass Balance 10.2.5 .compound Column name compounds prefix Sample_ID, NULL => \"Analyte Peak Name\" .checkValues Removes \"<\" values column make sure can coerced numeric. prot_.split Column name split samples protein dataframe .summarize Summarize values averages .SD Create column Standard Deviation prot_czero_value Column name, czero protein dataframe prot_czero_type RegEx filter C zero values","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fic end-to-end workflow (!!!) — ras.Fic_workflow","text":"Dataframe variables, used & calculated.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Fic_workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fic end-to-end workflow (!!!) — ras.Fic_workflow","text":"","code":"if (FALSE) {   # No example yet   }"},{"path":"https://klorator.github.io/aquaras/reference/ras.Fu_feces_workflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Fu feces workflow wrapper — ras.Fu_feces_workflow","title":"Fu feces workflow wrapper — ras.Fu_feces_workflow","text":"Fu feces workflow wrapper","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Fu_feces_workflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fu feces workflow wrapper — ras.Fu_feces_workflow","text":"","code":"ras.Fu_feces_workflow(   source = c(\"Sciex\", \"Waters\"),   ID = \"Sample Name\",   Sample_type = \"Sample Type\",   values = \"Calculated Concentration (nM)\",   Buffer = \"HBSS\",   Dilution_type = \"[:digit:]x\",   Dilution_extract = \"[:digit:]+(?=x)\",   Dilution_factor = 1,   stab = \"Stab\",   czero = \"Czero\",   D = (1/((1/4.8) * 0.95)),   MassBalance_2.5 = 1.75,   .compound = \"Analyte Peak Name\",   .checkValues = TRUE,   .summarize = TRUE,   .SD = TRUE )"},{"path":"https://klorator.github.io/aquaras/reference/ras.Fu_feces_workflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fu feces workflow wrapper — ras.Fu_feces_workflow","text":"source source data file comes ID Column name ID column splitting Sample_type Name type column raw data values Column name values data Buffer RegEx filter buffer values Dilution_type RegEx filter dilution factor values Dilution_extract RegEx extracting dilution factor Dilution_factor Numeric value dilution factor stab RegEx filter stability values czero RegEx filter C zero values values D Numeric value D MassBalance_2.5 Factor calulating Mass Balance 10.2.5 .compound Column name compounds prefix Sample_ID, NULL => \"Analyte Peak Name\" .checkValues Removes \"<\" values column make sure can coerced numeric. .summarize Summarize values averages .SD Create column Standard Deviation","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Fu_feces_workflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fu feces workflow wrapper — ras.Fu_feces_workflow","text":"Dataframe variables, used & calculated. Also writes data frame .csv (EU) & .xlsx files.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Fu_feces_workflow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fu feces workflow wrapper — ras.Fu_feces_workflow","text":"","code":"if (FALSE) {   # No example yet   }"},{"path":"https://klorator.github.io/aquaras/reference/ras.Randomizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomizer — ras.Randomizer","title":"Randomizer — ras.Randomizer","text":"Uses ras.ran_series() create series groups randomly sampled observations. Observations distributed repeated entries groups/within series. Number groups series calculated length(master_list) divided group_size, rounded nearest integer. observation can found (example groups can filled evenly) error message printed console N/inserted instead. write = TRUE write series comma delimited .csv file (excel?).","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Randomizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomizer — ras.Randomizer","text":"","code":"ras.Randomizer(   compound_list,   group_size,   series = 1,   write = FALSE,   fileName = NULL )"},{"path":"https://klorator.github.io/aquaras/reference/ras.Randomizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomizer — ras.Randomizer","text":"compound_list character vector observations/compound names group_size Integer many observations attempt place group series Number series make write Default FALSE. set TRUE write series .xlsx file fileName Default NULL. Name file. Automatically appended .xlsx","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Randomizer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomizer — ras.Randomizer","text":"List data frames","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.Randomizer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Randomizer — ras.Randomizer","text":"","code":"# Example with 4 even groups # Compound list Compound_list = c(   \"Comp_1\", \"Comp_2\", \"Comp_3\", \"Comp_4\", \"Comp_5\",   \"Comp_6\", \"Comp_7\", \"Comp_8\", \"Comp_9\", \"Comp_10\",   \"Comp_11\", \"Comp_12\", \"Comp_13\", \"Comp_14\", \"Comp_15\",   \"Comp_16\", \"Comp_17\", \"Comp_18\", \"Comp_19\", \"Comp_20\",   \"Comp_21\", \"Comp_22\", \"Comp_23\", \"Comp_24\")  series_A = ras.Randomizer(compound_list = Compound_list,                           group_size = 6,                           series = 2) print(\"+++++ Series A +++++\") #> [1] \"+++++ Series A +++++\" series_A #> $Series_01 #>   Group_01 Group_02 Group_03 Group_04 #> 1  Comp_13   Comp_4  Comp_16  Comp_20 #> 2  Comp_23   Comp_9   Comp_3   Comp_1 #> 3  Comp_12  Comp_24  Comp_22  Comp_19 #> 4   Comp_5   Comp_2   Comp_7  Comp_14 #> 5   Comp_6  Comp_11  Comp_10  Comp_18 #> 6  Comp_15  Comp_21  Comp_17   Comp_8 #>  #> $Series_02 #>   Group_01 Group_02 Group_03 Group_04 #> 1   Comp_1   Comp_2  Comp_22  Comp_13 #> 2  Comp_12  Comp_23   Comp_8  Comp_18 #> 3  Comp_19  Comp_10   Comp_9  Comp_24 #> 4  Comp_16   Comp_6  Comp_14  Comp_21 #> 5  Comp_11   Comp_4   Comp_5  Comp_20 #> 6   Comp_3   Comp_7  Comp_17  Comp_15 #>   # Example with 5 uneven groups # Compound list Compound_list = c(   \"Comp_1\", \"Comp_2\", \"Comp_3\", \"Comp_4\", \"Comp_5\",   \"Comp_6\", \"Comp_7\", \"Comp_8\", \"Comp_9\", \"Comp_10\",   \"Comp_11\", \"Comp_12\", \"Comp_13\", \"Comp_14\", \"Comp_15\",   \"Comp_16\", \"Comp_17\", \"Comp_18\", \"Comp_19\", \"Comp_20\",   \"Comp_21\", \"Comp_22\", \"Comp_23\", \"Comp_24\")  series_B = ras.Randomizer(Compound_list,                           group_size = 5,                           series = 2) #> [1] \"Error: Tried 100 times but couldn't select a random observation that met the criteria. Are the groups unevenly sized?\" #> [1] \"Error: Tried 100 times but couldn't select a random observation that met the criteria. Are the groups unevenly sized?\" print(\"+++++ Series B +++++\") #> [1] \"+++++ Series B +++++\" series_B #> $Series_01 #>   Group_01 Group_02 Group_03 Group_04 Group_05 #> 1  Comp_18   Comp_3   Comp_2  Comp_17   Comp_8 #> 2  Comp_12   Comp_4   Comp_5  Comp_23   Comp_7 #> 3  Comp_22  Comp_13  Comp_19   Comp_9  Comp_16 #> 4  Comp_21   Comp_6  Comp_24  Comp_15   Comp_1 #> 5  Comp_10  Comp_14  Comp_20  Comp_11      N/A #>  #> $Series_02 #>   Group_01 Group_02 Group_03 Group_04 Group_05 #> 1   Comp_8  Comp_15  Comp_20   Comp_7   Comp_2 #> 2  Comp_18  Comp_12  Comp_24  Comp_21  Comp_13 #> 3  Comp_22   Comp_6  Comp_16  Comp_10   Comp_4 #> 4  Comp_17   Comp_1  Comp_23  Comp_14  Comp_19 #> 5   Comp_5   Comp_9  Comp_11   Comp_3      N/A #>     if (FALSE) { # Example of writing to .xlsx file  Series_P = ras.Randomizer(Compound_list,                            group_size = 5,                            series = 2,                            write = TRUE,                            fileName = \"Series_P Example file of ras.Randomizer\")   }"},{"path":"https://klorator.github.io/aquaras/reference/ras.RunlistGenerator.html","id":null,"dir":"Reference","previous_headings":"","what":"App for making a runlist — ras.RunlistGenerator","title":"App for making a runlist — ras.RunlistGenerator","text":"Program input info 96-well-plates. Generates runlist Waters LC/MS software MassLynx.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.RunlistGenerator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"App for making a runlist — ras.RunlistGenerator","text":"","code":"ras.RunlistGenerator()"},{"path":"https://klorator.github.io/aquaras/reference/ras.RunlistGenerator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"App for making a runlist — ras.RunlistGenerator","text":"Creates Shiny GUI.","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/reference/ras.RunlistGenerator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"App for making a runlist — ras.RunlistGenerator","text":"","code":"if (FALSE) { ras.RunlistGenerator() # Launches the Shiny GUI. }"},{"path":"https://klorator.github.io/aquaras/reference/ras.SplitOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Split MassLynx output file — ras.SplitOutput","title":"Split MassLynx output file — ras.SplitOutput","text":"Splits MassLynx complete summary output file individual data frames based compound.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.SplitOutput.html","id":"uninteresting-output","dir":"Reference","previous_headings":"","what":"Uninteresting output","title":"Split MassLynx output file — ras.SplitOutput","text":"Spliting file generates stream \"New names: • `` -> `...1`\" output console particularly interesting lets know something.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.SplitOutput.html","id":"clean-true","dir":"Reference","previous_headings":"","what":"clean = TRUE","title":"Split MassLynx output file — ras.SplitOutput","text":"data frames cleaned ras.cleanDF() (unless clean = FALSE).","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.SplitOutput.html","id":"write-true","dir":"Reference","previous_headings":"","what":"write = TRUE","title":"Split MassLynx output file — ras.SplitOutput","text":"!!! DEFAULT WRITE FILE SYSTEM !!! Data frames written tsv files directory source file. Use write = FALSE disable .","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.SplitOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split MassLynx output file — ras.SplitOutput","text":"","code":"ras.SplitOutput(   sourceFiles = tcltk::tk_choose.files(),   clean = FALSE,   write = TRUE )"},{"path":"https://klorator.github.io/aquaras/reference/ras.SplitOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split MassLynx output file — ras.SplitOutput","text":"sourceFiles character vector one file paths clean Defaults FALSE data cleaning write Defaults TRUE writing file system","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.SplitOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split MassLynx output file — ras.SplitOutput","text":"Writes tsv file per compound directory source file. Also returns nested list data frames file","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/reference/ras.SplitOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split MassLynx output file — ras.SplitOutput","text":"","code":"if (FALSE) { ras.SplitOutput() # First thing the function does is ask the user for a file. ras.SplitOutput(clean = FALSE) # If the summary output file was not based on the provided template.   # !!! DOES **NOT** WRITE TO FILE SYSTEM !!! listDF = ras.SplitOutput(sourceFile = system.file(\"extdata\",                                                   \"Example_MLOutput.txt\",                                                   package = \"aquaras\",                                                   mustWork = TRUE),                          write = FALSE) listDF }"},{"path":"https://klorator.github.io/aquaras/reference/ras.StackOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack MassLynx output file — ras.StackOutput","title":"Stack MassLynx output file — ras.StackOutput","text":"Stacks MassLynx complete summary output file single dataframe. Adds column compound used. Behaves like ras.SplitOutput().","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.StackOutput.html","id":"write-true","dir":"Reference","previous_headings":"","what":"write = TRUE","title":"Stack MassLynx output file — ras.StackOutput","text":"!!! DEFAULT WRITE FILE SYSTEM !!! Data frames written tsv files directory source file. Use write = FALSE disable .","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.StackOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack MassLynx output file — ras.StackOutput","text":"","code":"ras.StackOutput(   sourceFiles = tcltk::tk_choose.files(caption = \"Select MassLynx output file\"),   write = TRUE )"},{"path":"https://klorator.github.io/aquaras/reference/ras.StackOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack MassLynx output file — ras.StackOutput","text":"sourceFiles character vector one file paths write Defaults TRUE writing file system","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.StackOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack MassLynx output file — ras.StackOutput","text":"Writes tsv file per compound directory source file. Also returns nested list data frames file","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/reference/ras.StackOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stack MassLynx output file — ras.StackOutput","text":"","code":"if (FALSE) {   # See ras.SplitOutput() for now   }"},{"path":"https://klorator.github.io/aquaras/reference/ras.TPAer.html","id":null,"dir":"Reference","previous_headings":"","what":"TPA - Do all the TPA stuff — ras.TPAer","title":"TPA - Do all the TPA stuff — ras.TPAer","text":"Clean, restructure, calculate, plot, export/save plots file system.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.TPAer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TPA - Do all the TPA stuff — ras.TPAer","text":"","code":"ras.TPAer(   df,   na.rm = FALSE,   save = FALSE,   file_type = \"png\",   folder_path = tcltk::tk_choose.dir() )"},{"path":"https://klorator.github.io/aquaras/reference/ras.TPAer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"TPA - Do all the TPA stuff — ras.TPAer","text":"df Data frame values na.rm TRUE, NA values dropped determining calculation save TRUE, writes files system file_type File extension/type exported images folder_path Path destination folder","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.TPAer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"TPA - Do all the TPA stuff — ras.TPAer","text":"List containing (1) Data frame (2) List generated plots","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.TPAer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TPA - Do all the TPA stuff — ras.TPAer","text":"","code":"### Very specific function; no example yet"},{"path":"https://klorator.github.io/aquaras/reference/ras.add.blank.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert blank rows — ras.add.blank","title":"Insert blank rows — ras.add.blank","text":"Function used within ras.create.Runlist() add blanks.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.add.blank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert blank rows — ras.add.blank","text":"","code":"ras.add.blank(Runlist, df.blank, blank.insert)"},{"path":"https://klorator.github.io/aquaras/reference/ras.add.blank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert blank rows — ras.add.blank","text":"Runlist data frame add blanks . df.blank data frame consisting blanks take . blank.insert integer many blanks add.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.add.blank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert blank rows — ras.add.blank","text":"Returns data frame supplied Runlist argument, specified number appended blanks.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.add.blank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Insert blank rows — ras.add.blank","text":"Function used within ras.create.Runlist() add blanks.","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/reference/ras.add.blank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert blank rows — ras.add.blank","text":"","code":"# Setup full.list = ras.Example_Runlist blank.max = 5 df.blank = dplyr::filter(full.list, full.list$LC_Well_Type == \"blank\") %>% # All blank rows   dplyr::mutate(Draw_Max = blank.max, Draw_Count = 0) Runlist = tibble::tibble(   Index        = double(),   Plate        = double(),   Row          = character(),   Col          = double(),   LC_Position  = character(),   Date         = character(),   Signature    = character(),   Sample_name  = character(),   Compound     = character(),   Timepoint    = character(),   Well_Type    = character(),   LC_Well_Type = character(),   Replicate    = character(),   Sample_text  = character(),   Draw_Max     = double(),   Draw_Count   = double())  # Run function Runlist1 = ras.add.blank(Runlist, df.blank, 3) # Adds 3 blanks to Runlist. Runlist1 #> # A tibble: 3 × 16 #>   Index Plate Row     Col LC_Position Date     Signature Sample_name    Compound #>   <dbl> <dbl> <chr> <dbl> <chr>       <chr>    <chr>     <chr>          <chr>    #> 1    13     3 B         1 3:B,1       20220725 RH        20220725_RH_I… NA       #> 2    13     3 B         1 3:B,1       20220725 RH        20220725_RH_I… NA       #> 3    13     3 B         1 3:B,1       20220725 RH        20220725_RH_I… NA       #> # ℹ 7 more variables: Timepoint <chr>, Well_Type <chr>, LC_Well_Type <chr>, #> #   Replicate <chr>, Sample_text <chr>, Draw_Max <dbl>, Draw_Count <dbl>"},{"path":"https://klorator.github.io/aquaras/reference/ras.add.compound.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert all analyte and blank rows for a compound — ras.add.compound","title":"Insert all analyte and blank rows for a compound — ras.add.compound","text":"Function used within ras.create.Runlist() add analyte blank rows compound. Passes arguments ras.add.type() ras.add.blank().","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.add.compound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert all analyte and blank rows for a compound — ras.add.compound","text":"","code":"ras.add.compound(   Runlist,   df.analyte,   df.blank,   compound,   wellType,   blank.type = 1 )"},{"path":"https://klorator.github.io/aquaras/reference/ras.add.compound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert all analyte and blank rows for a compound — ras.add.compound","text":"Runlist data frame add blanks . df.analyte data frame analytes take . df.blank data frame consisting blanks take . compound string compound filter . wellType vector well types filter . (string passed ras.add.type()) blank.type integer many blanks add types. (default = 1; passed ras.add.blank())","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.add.compound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert all analyte and blank rows for a compound — ras.add.compound","text":"Returns data frame supplied Runlist argument, appended analyte blank rows compound.","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/reference/ras.add.compound.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert all analyte and blank rows for a compound — ras.add.compound","text":"","code":"# Setup full.list = ras.Example_Runlist blank.max = 5 df.blank = dplyr::filter(full.list, full.list$LC_Well_Type == \"blank\") %>% # All blank rows   dplyr::mutate(Draw_Max = blank.max, Draw_Count = 0) df.analyte = dplyr::filter(full.list, full.list$LC_Well_Type == \"Analyte\") # All sample rows Runlist = tibble::tibble(   Index        = double(),   Plate        = double(),   Row          = character(),   Col          = double(),   LC_Position  = character(),   Date         = character(),   Signature    = character(),   Sample_name  = character(),   Compound     = character(),   Timepoint    = character(),   Well_Type    = character(),   LC_Well_Type = character(),   Replicate    = character(),   Sample_text  = character(),   Draw_Max     = double(),   Draw_Count   = double())   # Run function   # Adds 1 blank between every type. Runlist1 <- ras.add.compound(Runlist, df.analyte, df.blank, \"Paracetamol\",   c(\"bead\", \"medium\", \"cell\", \"STD\", \"blank\")) Runlist1 #> # A tibble: 47 × 16 #>    Index Plate Row     Col LC_Position Date     Signature Sample_name   Compound #>    <dbl> <dbl> <chr> <dbl> <chr>       <chr>    <chr>     <chr>         <chr>    #>  1    25     3 C         1 3:C,1       20220725 RH        20220725_RH_… Paracet… #>  2    26     3 C         2 3:C,2       20220725 RH        20220725_RH_… Paracet… #>  3    27     3 C         3 3:C,3       20220725 RH        20220725_RH_… Paracet… #>  4    28     3 C         4 3:C,4       20220725 RH        20220725_RH_… Paracet… #>  5    29     3 C         5 3:C,5       20220725 RH        20220725_RH_… Paracet… #>  6    30     3 C         6 3:C,6       20220725 RH        20220725_RH_… Paracet… #>  7    31     3 C         7 3:C,7       20220725 RH        20220725_RH_… Paracet… #>  8   136     4 D         4 4:D,4       20220725 RH        20220725_RH_… Paracet… #>  9   137     4 D         5 4:D,5       20220725 RH        20220725_RH_… Paracet… #> 10   138     4 D         6 4:D,6       20220725 RH        20220725_RH_… Paracet… #> # ℹ 37 more rows #> # ℹ 7 more variables: Timepoint <chr>, Well_Type <chr>, LC_Well_Type <chr>, #> #   Replicate <chr>, Sample_text <chr>, Draw_Max <dbl>, Draw_Count <dbl>    # Adds 3 blanks between every type. Runlist2 <- ras.add.compound(Runlist, df.analyte, df.blank, \"Ibuprofen\",   c(\"bead\", \"medium\", \"cell\", \"STD\", \"blank\"), 3) Runlist2 #> # A tibble: 55 × 16 #>    Index Plate Row     Col LC_Position Date     Signature Sample_name   Compound #>    <dbl> <dbl> <chr> <dbl> <chr>       <chr>    <chr>     <chr>         <chr>    #>  1    62     3 F         2 3:F,2       20220725 RH        20220725_RH_… Ibuprof… #>  2    63     3 F         3 3:F,3       20220725 RH        20220725_RH_… Ibuprof… #>  3    64     3 F         4 3:F,4       20220725 RH        20220725_RH_… Ibuprof… #>  4    65     3 F         5 3:F,5       20220725 RH        20220725_RH_… Ibuprof… #>  5    66     3 F         6 3:F,6       20220725 RH        20220725_RH_… Ibuprof… #>  6    67     3 F         7 3:F,7       20220725 RH        20220725_RH_… Ibuprof… #>  7    68     3 F         8 3:F,8       20220725 RH        20220725_RH_… Ibuprof… #>  8    69     3 F         9 3:F,9       20220725 RH        20220725_RH_… Ibuprof… #>  9    70     3 F        10 3:F,10      20220725 RH        20220725_RH_… Ibuprof… #> 10    71     3 F        11 3:F,11      20220725 RH        20220725_RH_… Ibuprof… #> # ℹ 45 more rows #> # ℹ 7 more variables: Timepoint <chr>, Well_Type <chr>, LC_Well_Type <chr>, #> #   Replicate <chr>, Sample_text <chr>, Draw_Max <dbl>, Draw_Count <dbl>"},{"path":"https://klorator.github.io/aquaras/reference/ras.add.type.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert analyte rows for a well type — ras.add.type","title":"Insert analyte rows for a well type — ras.add.type","text":"Function used within ras.create.Runlist() add analytes specified compound well type.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.add.type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert analyte rows for a well type — ras.add.type","text":"","code":"ras.add.type(Runlist, df.analyte, compound, wellType)"},{"path":"https://klorator.github.io/aquaras/reference/ras.add.type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert analyte rows for a well type — ras.add.type","text":"Runlist data frame add blanks . df.analyte data frame analytes take . compound string compound filter . wellType string well type filter .","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.add.type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert analyte rows for a well type — ras.add.type","text":"Returns data frame supplied Runlist argument, appended analytes.","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/reference/ras.add.type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert analyte rows for a well type — ras.add.type","text":"","code":"# Setup full.list = ras.Example_Runlist blank.max = 5 df.analyte = dplyr::filter(full.list, full.list$LC_Well_Type == \"Analyte\") # All sample rows Runlist = tibble::tibble(   Index        = double(),   Plate        = double(),   Row          = character(),   Col          = double(),   LC_Position  = character(),   Date         = character(),   Signature    = character(),   Sample_name  = character(),   Compound     = character(),   Timepoint    = character(),   Well_Type    = character(),   LC_Well_Type = character(),   Replicate    = character(),   Sample_text  = character(),   Draw_Max     = double(),   Draw_Count   = double())  # Run function Runlist1 <- ras.add.type(Runlist, df.analyte, \"Paracetamol\", \"cell\") Runlist1 #> # A tibble: 18 × 16 #>    Index Plate Row     Col LC_Position Date     Signature Sample_name   Compound #>    <dbl> <dbl> <chr> <dbl> <chr>       <chr>    <chr>     <chr>         <chr>    #>  1     1     3 A         1 3:A,1       20220725 RH        20220725_RH_… Paracet… #>  2     2     3 A         2 3:A,2       20220725 RH        20220725_RH_… Paracet… #>  3     3     3 A         3 3:A,3       20220725 RH        20220725_RH_… Paracet… #>  4     4     3 A         4 3:A,4       20220725 RH        20220725_RH_… Paracet… #>  5     5     3 A         5 3:A,5       20220725 RH        20220725_RH_… Paracet… #>  6     6     3 A         6 3:A,6       20220725 RH        20220725_RH_… Paracet… #>  7    32     3 C         8 3:C,8       20220725 RH        20220725_RH_… Paracet… #>  8    33     3 C         9 3:C,9       20220725 RH        20220725_RH_… Paracet… #>  9    34     3 C        10 3:C,10      20220725 RH        20220725_RH_… Paracet… #> 10    35     3 C        11 3:C,11      20220725 RH        20220725_RH_… Paracet… #> 11    36     3 C        12 3:C,12      20220725 RH        20220725_RH_… Paracet… #> 12    37     3 D         1 3:D,1       20220725 RH        20220725_RH_… Paracet… #> 13    38     3 D         2 3:D,2       20220725 RH        20220725_RH_… Paracet… #> 14    39     3 D         3 3:D,3       20220725 RH        20220725_RH_… Paracet… #> 15    40     3 D         4 3:D,4       20220725 RH        20220725_RH_… Paracet… #> 16    41     3 D         5 3:D,5       20220725 RH        20220725_RH_… Paracet… #> 17    42     3 D         6 3:D,6       20220725 RH        20220725_RH_… Paracet… #> 18    43     3 D         7 3:D,7       20220725 RH        20220725_RH_… Paracet… #> # ℹ 7 more variables: Timepoint <chr>, Well_Type <chr>, LC_Well_Type <chr>, #> #   Replicate <chr>, Sample_text <chr>, Draw_Max <dbl>, Draw_Count <dbl>"},{"path":"https://klorator.github.io/aquaras/reference/ras.create.Runlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Runlist from data frame — ras.create.Runlist","title":"Create a Runlist from data frame — ras.create.Runlist","text":"Creates Runlist standardized data frame supplied /made Shiny app ras.RunlistGenerator().","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.create.Runlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Runlist from data frame — ras.create.Runlist","text":"","code":"ras.create.Runlist(   full.list,   blank.start = 3,   blank.end = 5,   blank.comp = 2,   blank.type = 1,   blank.max = 5 )"},{"path":"https://klorator.github.io/aquaras/reference/ras.create.Runlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Runlist from data frame — ras.create.Runlist","text":"full.list full list, according package template, transformed runlist. blank.start Integer blanks start . blank.end Integer blanks end . blank.comp Integer blanks insert compounds. blank.type Integer blanks insert well types. blank.max Max number times draw blank well.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.create.Runlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Runlist from data frame — ras.create.Runlist","text":"Returns Runlist blanks spaced defined (sensible defaults).","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/reference/ras.create.Runlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Runlist from data frame — ras.create.Runlist","text":"","code":"# Setup full.list = ras.Example_Runlist head(full.list) #> # A tibble: 6 × 14 #>   Index Plate Row     Col LC_Position Date     Signature Sample_name    Compound #>   <dbl> <dbl> <chr> <dbl> <chr>       <chr>    <chr>     <chr>          <chr>    #> 1     1     3 A         1 3:A,1       20220725 RH        20220725_RH_I… Paracet… #> 2     2     3 A         2 3:A,2       20220725 RH        20220725_RH_I… Paracet… #> 3     3     3 A         3 3:A,3       20220725 RH        20220725_RH_I… Paracet… #> 4     4     3 A         4 3:A,4       20220725 RH        20220725_RH_I… Paracet… #> 5     5     3 A         5 3:A,5       20220725 RH        20220725_RH_I… Paracet… #> 6     6     3 A         6 3:A,6       20220725 RH        20220725_RH_I… Paracet… #> # ℹ 5 more variables: Timepoint <chr>, Well_Type <chr>, LC_Well_Type <chr>, #> #   Replicate <chr>, Sample_text <chr>  # Run function Runlist1 <- ras.create.Runlist(full.list) head(Runlist1) #> # A tibble: 6 × 16 #>   Index Plate Row     Col LC_Position Date     Signature Sample_name    Compound #>   <dbl> <dbl> <chr> <dbl> <chr>       <chr>    <chr>     <chr>          <chr>    #> 1    13     3 B         1 3:B,1       20220725 RH        20220725_RH_I… NA       #> 2    13     3 B         1 3:B,1       20220725 RH        20220725_RH_I… NA       #> 3    13     3 B         1 3:B,1       20220725 RH        20220725_RH_I… NA       #> 4    62     3 F         2 3:F,2       20220725 RH        20220725_RH_I… Ibuprof… #> 5    63     3 F         3 3:F,3       20220725 RH        20220725_RH_I… Ibuprof… #> 6    64     3 F         4 3:F,4       20220725 RH        20220725_RH_I… Ibuprof… #> # ℹ 7 more variables: Timepoint <chr>, Well_Type <chr>, LC_Well_Type <chr>, #> #   Replicate <chr>, Sample_text <chr>, Draw_Max <dbl>, Draw_Count <dbl>  Runlist2 <- ras.create.Runlist(full.list,                                blank.start = 4,                                blank.end   = 3,                                blank.comp  = 2,                                blank.type  = 1,                                blank.max   = 6) head(Runlist2) #> # A tibble: 6 × 16 #>   Index Plate Row     Col LC_Position Date     Signature Sample_name    Compound #>   <dbl> <dbl> <chr> <dbl> <chr>       <chr>    <chr>     <chr>          <chr>    #> 1    13     3 B         1 3:B,1       20220725 RH        20220725_RH_I… NA       #> 2    13     3 B         1 3:B,1       20220725 RH        20220725_RH_I… NA       #> 3    13     3 B         1 3:B,1       20220725 RH        20220725_RH_I… NA       #> 4    13     3 B         1 3:B,1       20220725 RH        20220725_RH_I… NA       #> 5    62     3 F         2 3:F,2       20220725 RH        20220725_RH_I… Ibuprof… #> 6    63     3 F         3 3:F,3       20220725 RH        20220725_RH_I… Ibuprof… #> # ℹ 7 more variables: Timepoint <chr>, Well_Type <chr>, LC_Well_Type <chr>, #> #   Replicate <chr>, Sample_text <chr>, Draw_Max <dbl>, Draw_Count <dbl>"},{"path":"https://klorator.github.io/aquaras/reference/ras.darkModeDF_Options.html","id":null,"dir":"Reference","previous_headings":"","what":"Options for data frame style — ras.darkModeDF_Options","title":"Options for data frame style — ras.darkModeDF_Options","text":"Sets reactable.theme base::options() CSS styling borrowed Reactable example documentation","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.darkModeDF_Options.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Options for data frame style — ras.darkModeDF_Options","text":"","code":"ras.darkModeDF_Options()"},{"path":[]},{"path":"https://klorator.github.io/aquaras/reference/ras.darkModeDF_Options.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Options for data frame style — ras.darkModeDF_Options","text":"","code":"if (FALSE) { ras.darkModeDF_Options() # Sets the global options for reactable.theme }"},{"path":"https://klorator.github.io/aquaras/reference/ras.dateSignAll.update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Date, Signature, & Sample_name — ras.dateSignAll.update","title":"Update Date, Signature, & Sample_name — ras.dateSignAll.update","text":"Update Date, Signature, & Sample_name entire data frame. Sample_name composite format \"date_signature_index\".","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.dateSignAll.update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Date, Signature, & Sample_name — ras.dateSignAll.update","text":"","code":"ras.dateSignAll.update(df, date, signature)"},{"path":"https://klorator.github.io/aquaras/reference/ras.dateSignAll.update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Date, Signature, & Sample_name — ras.dateSignAll.update","text":"df Data frame update date New date value (character string) signature New signature value","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.dateSignAll.update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Date, Signature, & Sample_name — ras.dateSignAll.update","text":"Updated data frame","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/reference/ras.dateSignAll.update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update Date, Signature, & Sample_name — ras.dateSignAll.update","text":"","code":"head(ras.Example_Runlist) #> # A tibble: 6 × 14 #>   Index Plate Row     Col LC_Position Date     Signature Sample_name    Compound #>   <dbl> <dbl> <chr> <dbl> <chr>       <chr>    <chr>     <chr>          <chr>    #> 1     1     3 A         1 3:A,1       20220725 RH        20220725_RH_I… Paracet… #> 2     2     3 A         2 3:A,2       20220725 RH        20220725_RH_I… Paracet… #> 3     3     3 A         3 3:A,3       20220725 RH        20220725_RH_I… Paracet… #> 4     4     3 A         4 3:A,4       20220725 RH        20220725_RH_I… Paracet… #> 5     5     3 A         5 3:A,5       20220725 RH        20220725_RH_I… Paracet… #> 6     6     3 A         6 3:A,6       20220725 RH        20220725_RH_I… Paracet… #> # ℹ 5 more variables: Timepoint <chr>, Well_Type <chr>, LC_Well_Type <chr>, #> #   Replicate <chr>, Sample_text <chr> Example_Runlist1 = ras.dateSignAll.update(df = ras.Example_Runlist,                                           date      = \"20220730\",                                           signature = \"RH\") head(Example_Runlist1) #> # A tibble: 6 × 14 #>   Index Plate Row     Col LC_Position Date     Signature Sample_name    Compound #>   <dbl> <dbl> <chr> <dbl> <chr>       <chr>    <chr>     <chr>          <chr>    #> 1     1     3 A         1 3:A,1       20220730 RH        20220730_RH_I… Paracet… #> 2     2     3 A         2 3:A,2       20220730 RH        20220730_RH_I… Paracet… #> 3     3     3 A         3 3:A,3       20220730 RH        20220730_RH_I… Paracet… #> 4     4     3 A         4 3:A,4       20220730 RH        20220730_RH_I… Paracet… #> 5     5     3 A         5 3:A,5       20220730 RH        20220730_RH_I… Paracet… #> 6     6     3 A         6 3:A,6       20220730 RH        20220730_RH_I… Paracet… #> # ℹ 5 more variables: Timepoint <chr>, Well_Type <chr>, LC_Well_Type <chr>, #> #   Replicate <chr>, Sample_text <chr>"},{"path":"https://klorator.github.io/aquaras/reference/ras.ran_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Random group — ras.ran_group","title":"Random group — ras.ran_group","text":"Populate group random observations/compounds. Used inside ras.ran_series().","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.ran_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random group — ras.ran_group","text":"","code":"ras.ran_group(   masterList = master_list,   groupName = c(),   seriesList = series_list,   seriesCheck = series_check,   groupSize = group_size )"},{"path":"https://klorator.github.io/aquaras/reference/ras.ran_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random group — ras.ran_group","text":"masterList character vector observations/compound names groupName Empty vector fill observations seriesList Data frame used control many times observation occurs seriesCheck Character vector cumulative unique observations across series groupSize Integer many observations attempt place group","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.ran_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random group — ras.ran_group","text":"List 1. populated groupName, 2. updated seriesList, 3. updated seriesCheck","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.ran_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Random series of groups — ras.ran_series","title":"Random series of groups — ras.ran_series","text":"Creates series groups randomly sampled observations. Observations distributed repeated entries groups/within series. Number groups series calculated length(master_list) divided group_size, rounded nearest integer. observation can found (example groups can filled evenly) error message printed console N/inserted instead.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.ran_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random series of groups — ras.ran_series","text":"","code":"ras.ran_series(master_list, group_size)"},{"path":"https://klorator.github.io/aquaras/reference/ras.ran_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random series of groups — ras.ran_series","text":"master_list character vector observations/compound names group_size Integer many observations attempt place group","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.ran_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random series of groups — ras.ran_series","text":"list character vectors random group (data frame?)","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.ran_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random series of groups — ras.ran_series","text":"","code":"# Example with 4 even groups # Compound list Compound_list = c( \"Comp_1\", \"Comp_2\", \"Comp_3\", \"Comp_4\", \"Comp_5\", \"Comp_6\", \"Comp_7\", \"Comp_8\", \"Comp_9\", \"Comp_10\", \"Comp_11\", \"Comp_12\", \"Comp_13\", \"Comp_14\", \"Comp_15\", \"Comp_16\", \"Comp_17\", \"Comp_18\", \"Comp_19\", \"Comp_20\", \"Comp_21\", \"Comp_22\", \"Comp_23\", \"Comp_24\")  series_A = ras.ran_series(master_list = Compound_list, group_size = 6) series_A #>   Group_01 Group_02 Group_03 Group_04 #> 1   Comp_8  Comp_22   Comp_7   Comp_1 #> 2  Comp_13   Comp_4  Comp_18  Comp_23 #> 3  Comp_21  Comp_15  Comp_14  Comp_19 #> 4  Comp_12   Comp_6   Comp_2  Comp_17 #> 5  Comp_24  Comp_11   Comp_5  Comp_10 #> 6  Comp_20   Comp_9   Comp_3  Comp_16  # Example with 5 uneven groups # Compound list Compound_list = c( \"Comp_1\", \"Comp_2\", \"Comp_3\", \"Comp_4\", \"Comp_5\", \"Comp_6\", \"Comp_7\", \"Comp_8\", \"Comp_9\", \"Comp_10\", \"Comp_11\", \"Comp_12\", \"Comp_13\", \"Comp_14\", \"Comp_15\", \"Comp_16\", \"Comp_17\", \"Comp_18\", \"Comp_19\", \"Comp_20\", \"Comp_21\", \"Comp_22\", \"Comp_23\", \"Comp_24\", \"Comp_25\")  series_B = ras.ran_series(Compound_list, group_size = 6) #> [1] \"Error: Tried 100 times but couldn't select a random observation that met the criteria. Are the groups unevenly sized?\" #> [1] \"Error: Tried 100 times but couldn't select a random observation that met the criteria. Are the groups unevenly sized?\" #> [1] \"Error: Tried 100 times but couldn't select a random observation that met the criteria. Are the groups unevenly sized?\" #> [1] \"Error: Tried 100 times but couldn't select a random observation that met the criteria. Are the groups unevenly sized?\" #> [1] \"Error: Tried 100 times but couldn't select a random observation that met the criteria. Are the groups unevenly sized?\" series_B #>   Group_01 Group_02 Group_03 Group_04 Group_05 #> 1   Comp_7  Comp_25  Comp_16  Comp_18  Comp_23 #> 2  Comp_17   Comp_2   Comp_5  Comp_24      N/A #> 3  Comp_14   Comp_9   Comp_8   Comp_4      N/A #> 4  Comp_11   Comp_1  Comp_13  Comp_20      N/A #> 5  Comp_22  Comp_19  Comp_12  Comp_15      N/A #> 6  Comp_10   Comp_3   Comp_6  Comp_21      N/A"},{"path":"https://klorator.github.io/aquaras/reference/ras.sanitizeInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Sanitize input — ras.sanitizeInput","title":"Sanitize input — ras.sanitizeInput","text":"Replaces underscores periods.","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.sanitizeInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sanitize input — ras.sanitizeInput","text":"","code":"ras.sanitizeInput(inputVar)"},{"path":"https://klorator.github.io/aquaras/reference/ras.sanitizeInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sanitize input — ras.sanitizeInput","text":"inputVar Character string sanitize","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.sanitizeInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sanitize input — ras.sanitizeInput","text":"Character string","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/reference/ras.sanitizeInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sanitize input — ras.sanitizeInput","text":"","code":"ras.sanitizeInput(\"Spaces etc -- but_no_underscore!\") #> [1] \"Spaces etc -- but.no.underscore!\""},{"path":"https://klorator.github.io/aquaras/reference/ras.server.html","id":null,"dir":"Reference","previous_headings":"","what":"Server for ras.RunlistGenerator() — ras.server","title":"Server for ras.RunlistGenerator() — ras.server","text":"Fulfills server argument shiny::shinyApp().","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Server for ras.RunlistGenerator() — ras.server","text":"","code":"ras.server(input, output, session)"},{"path":"https://klorator.github.io/aquaras/reference/ras.server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Server for ras.RunlistGenerator() — ras.server","text":"input, output, session described server shiny::shinyApp()","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/reference/ras.server.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Server for ras.RunlistGenerator() — ras.server","text":"","code":"if (FALSE) { shiny::shinyApp(ui = ras.ui, server = ras.server) }"},{"path":"https://klorator.github.io/aquaras/reference/ras.setup_dir_and_subfolders.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup directory & subfolders — ras.setup_dir_and_subfolders","title":"Setup directory & subfolders — ras.setup_dir_and_subfolders","text":"Setup directory & subfolders","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.setup_dir_and_subfolders.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup directory & subfolders — ras.setup_dir_and_subfolders","text":"","code":"ras.setup_dir_and_subfolders(output_dir = NULL)"},{"path":"https://klorator.github.io/aquaras/reference/ras.setup_dir_and_subfolders.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup directory & subfolders — ras.setup_dir_and_subfolders","text":"output_dir directory path","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.setup_dir_and_subfolders.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup directory & subfolders — ras.setup_dir_and_subfolders","text":"directory path","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.setup_dir_and_subfolders.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Setup directory & subfolders — ras.setup_dir_and_subfolders","text":"","code":"if (FALSE) {  # No example  }"},{"path":"https://klorator.github.io/aquaras/reference/ras.well.update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update well info — ras.well.update","title":"Update well info — ras.well.update","text":"Update well info","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.well.update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update well info — ras.well.update","text":"","code":"ras.well.update(   df,   well.current,   date,   signature,   compound,   timepoint,   type,   replicate )"},{"path":"https://klorator.github.io/aquaras/reference/ras.well.update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update well info — ras.well.update","text":"df Data frame update well.current Current well plate position (LC_Position) date New date value (character string) signature New signature value compound New compound value timepoint New timepoint value type New type value replicate New replicate value","code":""},{"path":"https://klorator.github.io/aquaras/reference/ras.well.update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update well info — ras.well.update","text":"data frame, updated row","code":""},{"path":[]},{"path":"https://klorator.github.io/aquaras/reference/ras.well.update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update well info — ras.well.update","text":"","code":"ras.Example_Runlist[1,] #> # A tibble: 1 × 14 #>   Index Plate Row     Col LC_Position Date     Signature Sample_name    Compound #>   <dbl> <dbl> <chr> <dbl> <chr>       <chr>    <chr>     <chr>          <chr>    #> 1     1     3 A         1 3:A,1       20220725 RH        20220725_RH_I… Paracet… #> # ℹ 5 more variables: Timepoint <chr>, Well_Type <chr>, LC_Well_Type <chr>, #> #   Replicate <chr>, Sample_text <chr> Example_Runlist1 = ras.well.update(df = ras.Example_Runlist,                                    well.current = \"3:A,1\",                                    date         = \"20220730\",                                    signature    = \"RH\",                                    compound     = \"Warfarin\",                                    timepoint    = \"42\",                                    type         = \"bead\",                                    replicate    = \"6\") Example_Runlist1[1,] #> # A tibble: 1 × 14 #>   Index Plate Row     Col LC_Position Date     Signature Sample_name    Compound #>   <dbl> <dbl> <chr> <dbl> <chr>       <chr>    <chr>     <chr>          <chr>    #> 1     1     3 A         1 3:A,1       20220730 RH        20220730_RH_I… Warfarin #> # ℹ 5 more variables: Timepoint <chr>, Well_Type <chr>, LC_Well_Type <chr>, #> #   Replicate <chr>, Sample_text <chr>"}]
